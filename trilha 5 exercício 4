abstract class VoteSystem {
  protected votes: Record<string, number>;

  constructor() {
    this.votes = {};
  }

  abstract voteFor(candidate: string): void;

  abstract getResults(): object;
}

class Election extends VoteSystem {

  voteFor(candidate: string): void {
    if (this.votes[candidate]) {
      this.votes[candidate] += 1;
    } else {
      this.votes[candidate] = 1;
    }
    console.log(`Voto computado para "${candidate}".`);
  }

  getResults(): object {
    return this.votes;
  }
}

class Poll extends VoteSystem {
  
  voteFor(candidate: string): void {
    if (this.votes[candidate]) {
      this.votes[candidate] += 1;
    } else {
      this.votes[candidate] = 1;
    }
    console.log(`Voto computado para "${candidate}".`);
  }

  getResults(): object {
    const sortedCandidates = Object.entries(this.votes).sort((a, b) => b[1] - a[1]);
    return Object.fromEntries(sortedCandidates); 
  }
}

const election = new Election();
election.voteFor("Alice");
election.voteFor("Bob");
election.voteFor("Alice");
election.voteFor("Charlie");
console.log("Resultados da eleição:", election.getResults());

const poll = new Poll();
poll.voteFor("Alice");
poll.voteFor("Bob");
poll.voteFor("Alice");
poll.voteFor("Charlie");
poll.voteFor("Bob");
poll.voteFor("Bob");
console.log("Resultados da pesquisa (ordenados):", poll.getResults());
