abstract class Pagamento {
  abstract processar(): void;
}

class PagamentoCartao extends Pagamento {
  private numeroCartao: string;

  constructor(numeroCartao: string) {
    super();
    this.numeroCartao = numeroCartao;
  }

  private validarCartao(): boolean {    
    return /^\d{16}$/.test(this.numeroCartao);
  }

  processar(): void {
    if (this.validarCartao()) {
      console.log("Pagamento com cartão processado com sucesso!");
    } else {
      console.log("Número do cartão inválido.");
    }
  }
}

class PagamentoBoleto extends Pagamento {
  processar(): void {
    const codigoBoleto = this.gerarCodigoBoleto();
    console.log(`Pagamento por boleto gerado. Código: ${codigoBoleto}`);
  }

  private gerarCodigoBoleto(): string {   
    const codigo = Array.from({ length: 47 }, () => Math.floor(Math.random() * 10)).join("");
    return codigo;
  }
}

function processarPagamentos(pagamentos: Pagamento[]): void {
  pagamentos.forEach((pagamento, index) => {
    console.log(`Processando pagamento ${index + 1}:`);
    pagamento.processar();
    console.log("");
  });
}

const pagamentos: Pagamento[] = [
  new PagamentoCartao("1234567812345678"), 
  new PagamentoCartao("1234"),            
  new PagamentoBoleto(),                  
];
processarPagamentos(pagamentos);


